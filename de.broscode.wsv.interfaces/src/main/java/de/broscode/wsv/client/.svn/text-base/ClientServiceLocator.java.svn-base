/*
 * This file has been generated by AndroMDA.
 * 
 * Copyright (c) 2004, 2006 Lufthansa Systems
 * All rights reserved. 
 * 
 * This program and the accompanying materials are proprietary information 
 * of Lufthansa Systems Business Solutions GmbH.
 * Use is subject to license terms.
 */
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringClientServiceLocator.vsl in andromda-spring-cartridge.
//
package de.broscode.wsv.client;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

import de.broscode.wsv.services.IUserService;

/**
 * Locates and provides all available application services.
 */
public class ClientServiceLocator
{
    /**
     * The default application context location.
     */
    private final String DEFAULT_CONTEXT_LOCATION = "applicationContext-core-import-remoteServices.xml";

    /**
     * The spring application context shared instance.
     */
    private ClassPathXmlApplicationContext context = null;

    /**
     * The application context location.
     */
    private String contextLocation;

    private ClientServiceLocator()
    {
        // shouldn't be instantiated
    }

    /**
     * The shared instance of this ClientServiceLocator.
     */
    private final static ClientServiceLocator instance = new ClientServiceLocator();

    /**
     * Gets the shared instance of this Class
     *
     * @return the shared service locator instance.
     */
    public static ClientServiceLocator instance()
    {
        return instance;
    }

    /**
     * Initializes the Spring application context from
     * the given <code>applicationContextLocation</code>.  If <code>null</code>
     * is specified for the <code>applicationContextLocation</code>
     * then the default application context will be used.
     *
     * @param applicationContextLocation the location of the context
     */
    public synchronized void init(String applicationContextLocation)
    {
        contextLocation = applicationContextLocation;
        context = null;
    }

    /**
     * Gets the Spring ApplicationContext.
     */
    protected synchronized ApplicationContext getContext()
    {
        if (context == null)
        {
            if (contextLocation == null)
            {
                contextLocation = DEFAULT_CONTEXT_LOCATION;
            }
            Thread currentThread = Thread.currentThread();
            ClassLoader originalClassloader = currentThread.getContextClassLoader();
            try
            {
                currentThread.setContextClassLoader(this.getClass().getClassLoader());
                context = new ClassPathXmlApplicationContext(contextLocation);
            }
            finally
            {
                currentThread.setContextClassLoader(originalClassloader);
            }
        }
        return context;
    }

    /**
     * Gets an instance of {@link de.kombiverkehr.kms.auftrag.core.service.AuftragService}.
     */
    public final IUserService getUserService()
    {
        return (IUserService)
            getContext().getBean("userService");
    }

    /**
     * Gets an instance of the given service.
     */
    public final Object getService(String serviceName)
    {
        return getContext().getBean(serviceName);
    }
	
}
